{"version":3,"file":"component---src-pages-404-tsx-ad52dd9d04a04d3fe383.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/pages/404.tsx","webpack://gatsby-starter-blog/./src/components/seo.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst NotFoundPage = ({ location }: { location: Location }) => {\n  return (\n    <Layout location={location}>\n      <h1>404: Not Found</h1>\n      <p>You just hit a route that doesn't exist... the sadness.</p>\n    </Layout>\n  )\n}\n\nexport const Head = ({ location }: { location: Location }) => (\n  <Seo title=\"404: Not Found\" location={location} />\n)\n\nexport default NotFoundPage\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport config from \"../../gatsby-config\"\n\ntype SeoProps = {\n  title: string\n  description?: string\n  location: Location\n  imagePath?: string\n  post?: CommonPost\n  children?: React.ReactNode\n}\n\nconst Seo = ({\n  title,\n  description,\n  location,\n  imagePath,\n  post,\n  children,\n}: SeoProps) => {\n  const { siteMetadata } = config as { siteMetadata: SiteMetadata }\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n\n  const metaDescription = description || siteMetadata.description\n  const fullTitle = isRootPath\n    ? siteMetadata.title\n    : `${title} | ${siteMetadata.title}`\n  const canonicalUrl =\n    siteMetadata.siteUrl + location.pathname.replace(/\\/page\\/([0-9])+\\//, \"\")\n  const imageUrl = `${siteMetadata.siteUrl}${\n    imagePath ? imagePath : \"/favicon.webp\"\n  }`\n\n  function createJsonLd() {\n    // JSON-LDの設定\n    const author = [\n      {\n        \"@type\": \"Person\",\n        name: siteMetadata.author.name,\n        description: siteMetadata.author.summary,\n        url: siteMetadata.siteUrl,\n        sameAs: [siteMetadata.social.twitter, siteMetadata.social.github],\n      },\n    ]\n\n    const publisher = {\n      \"@type\": \"Organization\",\n      name: siteMetadata.title,\n      description: siteMetadata.description,\n      logo: {\n        \"@type\": \"ImageObject\",\n        url: `${siteMetadata.siteUrl}/favicon.webp`,\n        width: 512,\n        height: 512,\n      },\n    }\n\n    let jsonLd = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": isRootPath ? \"webSite\" : \"webPage\",\n        inLanguage: \"ja\",\n        url: canonicalUrl,\n        name: title,\n        author: author,\n        publisher: publisher,\n        image: imageUrl,\n        description: metaDescription,\n      },\n    ]\n    if (post) {\n      const article = {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BlogPosting\",\n        url: canonicalUrl,\n        name: post.title,\n        headline: post.title,\n        image: {\n          \"@type\": \"ImageObject\",\n          url: imageUrl,\n        },\n        description: post.excerpt,\n        datePublished: new Date(post.date),\n        dateModified: new Date(post.dateModified),\n        mainEntityOfPage: {\n          \"@type\": \"WebPage\",\n          \"@id\": canonicalUrl,\n        },\n        author: author,\n        publisher: publisher,\n      }\n      // @ts-ignore\n      jsonLd = [...jsonLd, article]\n    }\n    return JSON.stringify(jsonLd)\n  }\n\n  let jsonLd = createJsonLd()\n\n  return (\n    <>\n      <html lang=\"ja\" />\n      <title>{fullTitle}</title>\n      <link rel=\"canonical\" href={canonicalUrl} />\n      <script type=\"application/ld+json\">{jsonLd}</script>\n\n      <meta name=\"description\" content={metaDescription} />\n      {imagePath && (\n        <>\n          <meta property=\"og:image\" content={imageUrl} />\n          <meta property=\"og:url\" content={imageUrl} />\n          <meta property=\"twitter:image\" content={imageUrl} />\n        </>\n      )}\n      <meta property=\"og:title\" content={fullTitle} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta\n        property=\"og:type\"\n        content={`${isRootPath ? \"website\" : \"webpage\"}`}\n      />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={siteMetadata.social.twitter} />\n      <meta name=\"twitter:title\" content={fullTitle} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["Head","_ref2","location","React","Seo","title","_ref","Layout","description","imagePath","post","children","siteMetadata","config","isRootPath","pathname","metaDescription","fullTitle","canonicalUrl","siteUrl","replace","imageUrl","jsonLd","author","name","summary","url","sameAs","social","twitter","github","publisher","logo","width","height","inLanguage","image","article","headline","excerpt","datePublished","Date","date","dateModified","mainEntityOfPage","concat","_toConsumableArray","JSON","stringify","createJsonLd","lang","rel","href","type","content","property"],"sourceRoot":""}