{"version":3,"file":"component---src-pages-index-tsx-c78a52ecf5159f4558b3.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/pages/index.tsx","webpack://gatsby-starter-blog/./src/components/pagination.tsx","webpack://gatsby-starter-blog/./src/style.tsx","webpack://gatsby-starter-blog/./src/components/seo.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport { convertCategory, mergePosts } from \"../utilFunction\"\nimport { ContentsOrderedListWrapper } from \"../style\"\nimport Pagination from \"../components/pagination\"\n\ntype BlogIndexProps = {\n  data: {\n    allMarkdownRemark: AllMarkdownRemark\n    allWpPost: AllWpPost\n    allFile: AllFile\n  }\n  location: Location\n}\n\nconst BlogIndex = ({ data, location }: BlogIndexProps) => {\n  const posts = mergePosts(data.allMarkdownRemark, data.allWpPost, data.allFile)\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location}>\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  const POST_PER_PAGE = 12\n  const maxPage = Math.ceil(posts.length / POST_PER_PAGE)\n\n  return (\n    <Layout location={location}>\n      <ContentsOrderedListWrapper>\n        {posts.slice(0, POST_PER_PAGE).map(post => {\n          return (\n            <li key={post.slug}>\n              <article\n                className=\"post-list-item\"\n                itemType=\"https://schema.org/Article\"\n              >\n                <Link\n                  to={`/${convertCategory(post.category)}/${post.slug}`}\n                  itemProp=\"url\"\n                >\n                  <h2>\n                    <span itemProp=\"headline\">{post.title}</span>\n                  </h2>\n                  <section>\n                    <div style={{ textAlign: \"right\" }}>\n                      <small>\n                        <time>{post.dateModified}</time>\n                      </small>\n                    </div>\n                    <div className=\"thumbnail\">\n                      {typeof post.gatsbyImage === \"undefined\" || (\n                        <GatsbyImage\n                          alt={post.altText}\n                          image={post.gatsbyImage}\n                        />\n                      )}\n                    </div>\n                    <p\n                      dangerouslySetInnerHTML={{ __html: post.excerpt }}\n                      itemProp=\"description\"\n                    />\n                  </section>\n                </Link>\n              </article>\n            </li>\n          )\n        })}\n      </ContentsOrderedListWrapper>\n      <Pagination maxPage={maxPage} current={1} />\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = ({ location }: BlogIndexProps) => (\n  <Seo title=\"\" location={location} />\n)\n\nexport const pageQuery = graphql`\n  {\n    allFile(filter: { sourceInstanceName: { eq: \"images\" } }) {\n      edges {\n        node {\n          relativePath\n          childImageSharp {\n            gatsbyImageData(\n              width: 100\n              height: 100\n              formats: [AUTO, WEBP, AVIF]\n              placeholder: BLURRED\n            )\n          }\n        }\n      }\n    }\n    allMarkdownRemark {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          date(formatString: \"YYYY/MM/DD\")\n          dateModified(formatString: \"YYYY/MM/DD\")\n          description\n          featuredImagePath\n          category\n        }\n      }\n    }\n    allWpPost {\n      nodes {\n        title\n        excerpt\n        slug\n        date(formatString: \"YYYY/MM/DD\")\n        modified(formatString: \"YYYY/MM/DD\")\n        featuredImage {\n          node {\n            altText\n            gatsbyImage(\n              width: 100\n              height: 100\n              formats: [AUTO, WEBP, AVIF]\n              placeholder: BLURRED\n            )\n          }\n        }\n        categories {\n          nodes {\n            name\n          }\n        }\n      }\n    }\n  }\n`\n","import { Link } from \"gatsby\"\nimport React from \"react\"\nimport styled from \"styled-components\"\n\ntype PaginationProps = {\n  maxPage: number\n  current: number\n  type?: string\n}\nconst Pagination = ({ maxPage, current, type = \"\" }: PaginationProps) => {\n  let first\n  let prev\n  let next\n  let last\n\n  if (current === 1) {\n    first = (\n      <li className=\"not-work\" key=\"pagination0\">\n        <span>最新</span>\n      </li>\n    )\n  } else {\n    first = (\n      <li key=\"pagination0\">\n        <Link to={`/${type}${type ? \"/\" : \"\"}`}>最新</Link>\n      </li>\n    )\n  }\n\n  if (current === 1) {\n    prev = (\n      <li className=\"not-work\" key=\"pagination1\">\n        <span>前へ</span>\n      </li>\n    )\n  } else if (current === 2) {\n    prev = (\n      <li key=\"pagination1\">\n        <Link to={`/${type}${type ? \"/\" : \"\"}`}>前へ</Link>\n      </li>\n    )\n  } else {\n    prev = (\n      <li key=\"pagination1\">\n        <Link to={`/${type}${type ? \"/\" : \"\"}page/${current - 1}/`}>前へ</Link>\n      </li>\n    )\n  }\n\n  if (current === maxPage) {\n    next = (\n      <li className=\"not-work\" key=\"pagination3\">\n        <span>次へ</span>\n      </li>\n    )\n  } else {\n    next = (\n      <li key=\"pagination3\">\n        <Link to={`/${type}${type ? \"/\" : \"\"}page/${current + 1}/`}>次へ</Link>\n      </li>\n    )\n  }\n\n  if (current === maxPage) {\n    last = (\n      <li className=\"not-work\" key=\"paginatio4\">\n        <span>最後</span>\n      </li>\n    )\n  } else {\n    last = (\n      <li key=\"pagination4\">\n        <Link to={`/${type}${type ? \"/\" : \"\"}page/${maxPage}/`}>最後</Link>\n      </li>\n    )\n  }\n  if (maxPage > 1) {\n    return (\n      <PaginationWrapper>\n        <ul>\n          {first}\n          {prev}\n          <li key=\"pagination2\">\n            page {current}/{maxPage}\n          </li>\n          {next}\n          {last}\n        </ul>\n      </PaginationWrapper>\n    )\n  } else {\n    return <></>\n  }\n}\n\nexport default Pagination\n\nconst PaginationWrapper = styled.nav`\n  ul {\n    display: flex;\n    list-style: none;\n    justify-content: center;\n\n    li {\n      padding: 0 10px;\n\n      &.not-work span {\n        text-decoration: none;\n        background: var(--orange);\n        color: #fff;\n        opacity: 0.5;\n      }\n\n      span,\n      a {\n        text-decoration: underline;\n        display: flex;\n        align-items: center;\n        font-weight: 700;\n        color: var(--orange);\n        border-radius: 5px;\n        border: 1px solid var(--orange);\n        padding: 0 10px;\n      }\n    }\n  }\n`\n","import styled from \"styled-components\"\n\nexport const ContentsListHeader = styled.header`\n  text-align: center;\n\n  h1,\n  h2 {\n    &:after {\n      margin: 0 auto;\n      content: \"\";\n      display: block;\n      width: 98%;\n      height: 3px;\n      background: var(--orange);\n    }\n  }\n`\n\nexport const ContentsOrderedListWrapper = styled.ol`\n  column-count: 1;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  flex-wrap: wrap;\n  width: 100%;\n\n  li {\n    padding: 5px;\n    margin: var(--spacing-1);\n    box-sizing: border-box;\n    border: 1px solid var(--black);\n    border-radius: 5px;\n    background-color: #fff;\n\n    a {\n      color: var(--black);\n      text-decoration: none;\n    }\n\n    h2 {\n      font-size: var(--fontSize-2);\n    }\n  }\n  .thumbnail {\n    float: left;\n  }\n\n  @media screen and (min-width: calc(512px + 160px)) {\n    column-count: 2;\n\n    li {\n      padding: 15px;\n      width: 48%;\n\n      h2 {\n        font-size: var(--fontSize-3);\n      }\n\n      a {\n        &:hover h2 {\n          text-decoration: underline;\n        }\n      }\n    }\n  }\n  @media screen and (min-width: calc(768px + 330px)) {\n    column-count: 3;\n\n    li {\n      width: 32%;\n    }\n  }\n`\n\nexport const NormalAreaWrapper = styled.div`\n  background-color: #fff;\n`\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport config from \"../../gatsby-config\"\n\ntype SeoProps = {\n  title: string\n  description?: string\n  location: Location\n  imagePath?: string\n  post?: CommonPost\n  children?: React.ReactNode\n}\n\nconst Seo = ({\n  title,\n  description,\n  location,\n  imagePath,\n  post,\n  children,\n}: SeoProps) => {\n  const { siteMetadata } = config as { siteMetadata: SiteMetadata }\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n\n  const metaDescription = description || siteMetadata.description\n  const fullTitle = isRootPath\n    ? siteMetadata.title\n    : `${title} | ${siteMetadata.title}`\n  const canonicalUrl =\n    siteMetadata.siteUrl + location.pathname.replace(/\\/page\\/([0-9])+\\//, \"\")\n  const imageUrl = `${siteMetadata.siteUrl}${\n    imagePath ? imagePath : \"/favicon.webp\"\n  }`\n\n  function createJsonLd() {\n    // JSON-LDの設定\n    const author = [\n      {\n        \"@type\": \"Person\",\n        name: siteMetadata.author.name,\n        description: siteMetadata.author.summary,\n        url: siteMetadata.siteUrl,\n        sameAs: [siteMetadata.social.twitter, siteMetadata.social.github],\n      },\n    ]\n\n    const publisher = {\n      \"@type\": \"Organization\",\n      name: siteMetadata.title,\n      description: siteMetadata.description,\n      logo: {\n        \"@type\": \"ImageObject\",\n        url: `${siteMetadata.siteUrl}/favicon.webp`,\n        width: 512,\n        height: 512,\n      },\n    }\n\n    let jsonLd = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": isRootPath ? \"webSite\" : \"webPage\",\n        inLanguage: \"ja\",\n        url: canonicalUrl,\n        name: title,\n        author: author,\n        publisher: publisher,\n        image: imageUrl,\n        description: metaDescription,\n      },\n    ]\n    if (post) {\n      const article = {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BlogPosting\",\n        url: canonicalUrl,\n        name: post.title,\n        headline: post.title,\n        image: {\n          \"@type\": \"ImageObject\",\n          url: imageUrl,\n        },\n        description: post.excerpt,\n        datePublished: new Date(post.date),\n        dateModified: new Date(post.dateModified),\n        mainEntityOfPage: {\n          \"@type\": \"WebPage\",\n          \"@id\": canonicalUrl,\n        },\n        author: author,\n        publisher: publisher,\n      }\n      // @ts-ignore\n      jsonLd = [...jsonLd, article]\n    }\n    return JSON.stringify(jsonLd)\n  }\n\n  let jsonLd = createJsonLd()\n\n  return (\n    <>\n      <html lang=\"ja\" />\n      <title>{fullTitle}</title>\n      <link rel=\"canonical\" href={canonicalUrl} />\n      <script type=\"application/ld+json\">{jsonLd}</script>\n\n      <meta name=\"description\" content={metaDescription} />\n      {imagePath && (\n        <>\n          <meta property=\"og:image\" content={imageUrl} />\n          <meta property=\"og:url\" content={imageUrl} />\n          <meta property=\"twitter:image\" content={imageUrl} />\n        </>\n      )}\n      <meta property=\"og:title\" content={fullTitle} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta\n        property=\"og:type\"\n        content={`${isRootPath ? \"website\" : \"webpage\"}`}\n      />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={siteMetadata.social.twitter} />\n      <meta name=\"twitter:title\" content={fullTitle} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["_ref","data","location","posts","mergePosts","allMarkdownRemark","allWpPost","allFile","length","React","Layout","maxPage","Math","ceil","ContentsOrderedListWrapper","slice","map","post","key","slug","className","itemType","Link","to","convertCategory","category","itemProp","title","style","textAlign","dateModified","gatsbyImage","GatsbyImage","alt","altText","image","dangerouslySetInnerHTML","__html","excerpt","Pagination","current","Head","_ref2","Seo","first","prev","next","last","type","PaginationWrapper","styled","nav","ContentsListHeader","header","ol","div","description","imagePath","children","siteMetadata","config","isRootPath","pathname","metaDescription","fullTitle","canonicalUrl","siteUrl","replace","imageUrl","jsonLd","author","name","summary","url","sameAs","social","twitter","github","publisher","logo","width","height","inLanguage","article","headline","datePublished","Date","date","mainEntityOfPage","concat","_toConsumableArray","JSON","stringify","createJsonLd","lang","rel","href","content","property"],"sourceRoot":""}