{"version":3,"file":"component---src-templates-category-list-tsx-ef416f096e312df8fbc2.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/templates/category-list.tsx","webpack://gatsby-starter-blog/./src/style.tsx","webpack://gatsby-starter-blog/./src/components/seo.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { graphql, Link } from \"gatsby\"\nimport { PageContext } from \"gatsby/internal\"\nimport { convertCategory, mergePosts } from \"../utilFunction\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport { ContentsListHeader, ContentsOrderedListWrapper } from \"../style\"\n\nconst CategoryList = ({\n  pageContext,\n  data,\n  location,\n}: {\n  pageContext: PageContext\n  data: any\n  location: Location\n}) => {\n  const categoryName = pageContext.category as string\n  const posts = mergePosts(data.allMarkdownRemark, data.allWpPost, data.allFile)\n  const title = `【${categoryName}】カテゴリー 一覧`\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location}>\n        <p>そのカテゴリーの記事はありません。</p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location}>\n      <ContentsListHeader>\n        <h1>{title}</h1>\n        <p>{posts.length} 記事あります</p>\n      </ContentsListHeader>\n      <ContentsOrderedListWrapper>\n        {posts.map(post => {\n          return (\n            <li key={post.slug}>\n              <article\n                className=\"post-list-item\"\n                itemType=\"http://schema.org/Article\"\n              >\n                <Link to={`/${convertCategory(categoryName)}/${post.slug}`}>\n                  <h2>\n                    <span>{post.title}</span>\n                  </h2>\n                  <section>\n                    <div>\n                      <small>\n                        <time>{post.dateModified}</time>\n                      </small>\n                    </div>\n                    <div className=\"thumbnail\">\n                      {typeof post.gatsbyImage === \"undefined\" || (\n                        <GatsbyImage\n                          alt={post.altText}\n                          image={post.gatsbyImage}\n                          className=\"thumbnail\"\n                        />\n                      )}\n                    </div>\n                    <p dangerouslySetInnerHTML={{ __html: post.excerpt }} />\n                  </section>\n                </Link>\n              </article>\n            </li>\n          )\n        })}\n      </ContentsOrderedListWrapper>\n    </Layout>\n  )\n}\n\nexport default CategoryList\n\nexport const Head = ({\n  pageContext,\n  location,\n}: {\n  pageContext: PageContext\n  location: Location\n}) => {\n  return (\n    <Seo\n      title={`【${pageContext.category}】カテゴリー 一覧`}\n      description={`【${pageContext.category}】カテゴリーの記事一覧です`}\n      location={location}\n    />\n  )\n}\n\nexport const pageQuery = graphql`\n  query ($category: String) {\n    allMarkdownRemark(\n      filter: { frontmatter: { category: { eq: $category } } }\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          date(formatString: \"YYYY/MM/DD\")\n          dateModified(formatString: \"YYYY/MM/DD\")\n          description\n          featuredImagePath\n        }\n      }\n    }\n    allWpPost(\n      filter: {\n        categories: { nodes: { elemMatch: { name: { eq: $category } } } }\n      }\n    ) {\n      nodes {\n        title\n        excerpt\n        slug\n        date(formatString: \"YYYY/MM/DD\")\n        modified(formatString: \"YYYY/MM/DD\")\n        featuredImage {\n          node {\n            altText\n            gatsbyImage(\n              width: 100\n              height: 100\n              formats: [AUTO, WEBP, AVIF]\n              placeholder: BLURRED\n            )\n          }\n        }\n      }\n    }\n    allFile(filter: { sourceInstanceName: { eq: \"images\" } }) {\n      edges {\n        node {\n          relativePath\n          childImageSharp {\n            gatsbyImageData(\n              width: 100\n              height: 100\n              formats: [AUTO, WEBP, AVIF]\n              placeholder: BLURRED\n            )\n          }\n        }\n      }\n    }\n  }\n`\n","import styled from \"styled-components\"\n\nexport const ContentsListHeader = styled.header`\n  text-align: center;\n\n  h1,\n  h2 {\n    &:after {\n      margin: 0 auto;\n      content: \"\";\n      display: block;\n      width: 98%;\n      height: 3px;\n      background: var(--orange);\n    }\n  }\n`\n\nexport const ContentsOrderedListWrapper = styled.ol`\n  column-count: 1;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  flex-wrap: wrap;\n  width: 100%;\n\n  li {\n    padding: 5px;\n    margin: var(--spacing-1);\n    box-sizing: border-box;\n    border: 1px solid var(--black);\n    border-radius: 5px;\n    background-color: #fff;\n\n    a {\n      color: var(--black);\n      text-decoration: none;\n    }\n\n    h2 {\n      font-size: var(--fontSize-2);\n    }\n  }\n  .thumbnail {\n    float: left;\n  }\n\n  @media screen and (min-width: calc(512px + 160px)) {\n    column-count: 2;\n\n    li {\n      padding: 15px;\n      width: 48%;\n\n      h2 {\n        font-size: var(--fontSize-3);\n      }\n\n      a {\n        &:hover h2 {\n          text-decoration: underline;\n        }\n      }\n    }\n  }\n  @media screen and (min-width: calc(768px + 330px)) {\n    column-count: 3;\n\n    li {\n      width: 32%;\n    }\n  }\n`\n\nexport const NormalAreaWrapper = styled.div`\n  background-color: #fff;\n`\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport config from \"../../gatsby-config\"\n\ntype SeoProps = {\n  title: string\n  description?: string\n  location: Location\n  imagePath?: string\n  post?: CommonPost\n  children?: React.ReactNode\n}\n\nconst Seo = ({\n  title,\n  description,\n  location,\n  imagePath,\n  post,\n  children,\n}: SeoProps) => {\n  const { siteMetadata } = config as { siteMetadata: SiteMetadata }\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n\n  const metaDescription = description || siteMetadata.description\n  const fullTitle = isRootPath\n    ? siteMetadata.title\n    : `${title} | ${siteMetadata.title}`\n  const canonicalUrl =\n    siteMetadata.siteUrl + location.pathname.replace(/\\/page\\/([0-9])+\\//, \"\")\n  const imageUrl = `${siteMetadata.siteUrl}${\n    imagePath ? imagePath : \"/favicon.webp\"\n  }`\n\n  function createJsonLd() {\n    // JSON-LDの設定\n    const author = [\n      {\n        \"@type\": \"Person\",\n        name: siteMetadata.author.name,\n        description: siteMetadata.author.summary,\n        url: siteMetadata.siteUrl,\n        sameAs: [siteMetadata.social.twitter, siteMetadata.social.github],\n      },\n    ]\n\n    const publisher = {\n      \"@type\": \"Organization\",\n      name: siteMetadata.title,\n      description: siteMetadata.description,\n      logo: {\n        \"@type\": \"ImageObject\",\n        url: `${siteMetadata.siteUrl}/favicon.webp`,\n        width: 512,\n        height: 512,\n      },\n    }\n\n    let jsonLd = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": isRootPath ? \"webSite\" : \"webPage\",\n        inLanguage: \"ja\",\n        url: canonicalUrl,\n        name: title,\n        author: author,\n        publisher: publisher,\n        image: imageUrl,\n        description: metaDescription,\n      },\n    ]\n    if (post) {\n      const article = {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BlogPosting\",\n        url: canonicalUrl,\n        name: post.title,\n        headline: post.title,\n        image: {\n          \"@type\": \"ImageObject\",\n          url: imageUrl,\n        },\n        description: post.excerpt,\n        datePublished: new Date(post.date),\n        dateModified: new Date(post.dateModified),\n        mainEntityOfPage: {\n          \"@type\": \"WebPage\",\n          \"@id\": canonicalUrl,\n        },\n        author: author,\n        publisher: publisher,\n      }\n      // @ts-ignore\n      jsonLd = [...jsonLd, article]\n    }\n    return JSON.stringify(jsonLd)\n  }\n\n  let jsonLd = createJsonLd()\n\n  return (\n    <>\n      <html lang=\"ja\" />\n      <title>{fullTitle}</title>\n      <link rel=\"canonical\" href={canonicalUrl} />\n      <script type=\"application/ld+json\">{jsonLd}</script>\n\n      <meta name=\"description\" content={metaDescription} />\n      {imagePath && (\n        <>\n          <meta property=\"og:image\" content={imageUrl} />\n          <meta property=\"og:url\" content={imageUrl} />\n          <meta property=\"twitter:image\" content={imageUrl} />\n        </>\n      )}\n      <meta property=\"og:title\" content={fullTitle} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta\n        property=\"og:type\"\n        content={`${isRootPath ? \"website\" : \"webpage\"}`}\n      />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={siteMetadata.social.twitter} />\n      <meta name=\"twitter:title\" content={fullTitle} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["_ref","pageContext","data","location","categoryName","category","posts","mergePosts","allMarkdownRemark","allWpPost","allFile","title","length","React","Layout","ContentsListHeader","ContentsOrderedListWrapper","map","post","key","slug","className","itemType","Link","to","convertCategory","dateModified","gatsbyImage","GatsbyImage","alt","altText","image","dangerouslySetInnerHTML","__html","excerpt","Head","_ref2","Seo","description","styled","header","withConfig","displayName","componentId","ol","div","imagePath","children","siteMetadata","config","isRootPath","pathname","metaDescription","fullTitle","canonicalUrl","siteUrl","replace","imageUrl","jsonLd","author","name","summary","url","sameAs","social","twitter","github","publisher","logo","width","height","inLanguage","article","headline","datePublished","Date","date","mainEntityOfPage","concat","_toConsumableArray","JSON","stringify","createJsonLd","lang","rel","href","type","content","property"],"sourceRoot":""}