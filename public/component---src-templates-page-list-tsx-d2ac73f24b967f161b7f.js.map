{"version":3,"file":"component---src-templates-page-list-tsx-d2ac73f24b967f161b7f.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/pagination.tsx","webpack://gatsby-starter-blog/./src/components/seo.tsx","webpack://gatsby-starter-blog/./src/style.tsx","webpack://gatsby-starter-blog/./src/templates/page-list.tsx"],"sourcesContent":["import { Link } from \"gatsby\"\nimport React from \"react\"\nimport styled from \"styled-components\"\n\ntype PaginationProps = {\n  maxPage: number\n  current: number\n  type?: string\n}\nconst Pagination = ({ maxPage, current, type = \"\" }: PaginationProps) => {\n  let first\n  let prev\n  let next\n  let last\n\n  if (current === 1) {\n    first = (\n      <li className=\"not-work\" key=\"pagination0\">\n        <span>最新</span>\n      </li>\n    )\n  } else {\n    first = (\n      <li key=\"pagination0\">\n        <Link to={`/${type}${type ? \"/\" : \"\"}`}>最新</Link>\n      </li>\n    )\n  }\n\n  if (current === 1) {\n    prev = (\n      <li className=\"not-work\" key=\"pagination1\">\n        <span>前へ</span>\n      </li>\n    )\n  } else if (current === 2) {\n    prev = (\n      <li key=\"pagination1\">\n        <Link to={`/${type}${type ? \"/\" : \"\"}`}>前へ</Link>\n      </li>\n    )\n  } else {\n    prev = (\n      <li key=\"pagination1\">\n        <Link to={`/${type}${type ? \"/\" : \"\"}page/${current - 1}/`}>前へ</Link>\n      </li>\n    )\n  }\n\n  if (current === maxPage) {\n    next = (\n      <li className=\"not-work\" key=\"pagination3\">\n        <span>次へ</span>\n      </li>\n    )\n  } else {\n    next = (\n      <li key=\"pagination3\">\n        <Link to={`/${type}${type ? \"/\" : \"\"}page/${current + 1}/`}>次へ</Link>\n      </li>\n    )\n  }\n\n  if (current === maxPage) {\n    last = (\n      <li className=\"not-work\" key=\"paginatio4\">\n        <span>最後</span>\n      </li>\n    )\n  } else {\n    last = (\n      <li key=\"pagination4\">\n        <Link to={`/${type}${type ? \"/\" : \"\"}page/${maxPage}/`}>最後</Link>\n      </li>\n    )\n  }\n  if (maxPage > 1) {\n    return (\n      <PaginationWrapper>\n        <ul>\n          {first}\n          {prev}\n          <li key=\"pagination2\">\n            page {current}/{maxPage}\n          </li>\n          {next}\n          {last}\n        </ul>\n      </PaginationWrapper>\n    )\n  } else {\n    return <></>\n  }\n}\n\nexport default Pagination\n\nconst PaginationWrapper = styled.nav`\n  ul {\n    display: flex;\n    list-style: none;\n    justify-content: center;\n\n    li {\n      padding: 0 10px;\n\n      &.not-work span {\n        text-decoration: none;\n        background: var(--orange);\n        color: #fff;\n        opacity: 0.5;\n      }\n\n      span,\n      a {\n        text-decoration: underline;\n        display: flex;\n        align-items: center;\n        font-weight: 700;\n        color: var(--orange);\n        border-radius: 5px;\n        border: 1px solid var(--orange);\n        padding: 0 10px;\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport config from \"../../gatsby-config\"\n\ntype SeoProps = {\n  title: string\n  description?: string\n  location: Location\n  imagePath?: string\n  post?: CommonPost\n  children?: React.ReactNode\n}\n\nconst Seo = ({\n  title,\n  description,\n  location,\n  imagePath,\n  post,\n  children,\n}: SeoProps) => {\n  const { siteMetadata } = config as { siteMetadata: SiteMetadata }\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n\n  const metaDescription = description || siteMetadata.description\n  const fullTitle = isRootPath\n    ? siteMetadata.title\n    : `${title} | ${siteMetadata.title}`\n  const canonicalUrl =\n    siteMetadata.siteUrl + location.pathname.replace(/\\/page\\/([0-9])+\\//, \"\")\n  const imageUrl = `${siteMetadata.siteUrl}${\n    imagePath ? imagePath : \"/favicon.webp\"\n  }`\n\n  function createJsonLd() {\n    // JSON-LDの設定\n    const author = [\n      {\n        \"@type\": \"Person\",\n        name: siteMetadata.author.name,\n        description: siteMetadata.author.summary,\n        url: siteMetadata.siteUrl,\n        sameAs: [siteMetadata.social.twitter, siteMetadata.social.github],\n      },\n    ]\n\n    const publisher = {\n      \"@type\": \"Organization\",\n      name: siteMetadata.title,\n      description: siteMetadata.description,\n      logo: {\n        \"@type\": \"ImageObject\",\n        url: `${siteMetadata.siteUrl}/favicon.webp`,\n        width: 512,\n        height: 512,\n      },\n    }\n\n    let jsonLd = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": isRootPath ? \"webSite\" : \"webPage\",\n        inLanguage: \"ja\",\n        url: canonicalUrl,\n        name: title,\n        author: author,\n        publisher: publisher,\n        image: imageUrl,\n        description: metaDescription,\n      },\n    ]\n    if (post) {\n      const article = {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"BlogPosting\",\n        url: canonicalUrl,\n        name: post.title,\n        headline: post.title,\n        image: {\n          \"@type\": \"ImageObject\",\n          url: imageUrl,\n        },\n        description: post.excerpt,\n        datePublished: new Date(post.date),\n        dateModified: new Date(post.dateModified),\n        mainEntityOfPage: {\n          \"@type\": \"WebPage\",\n          \"@id\": canonicalUrl,\n        },\n        author: author,\n        publisher: publisher,\n      }\n      // @ts-ignore\n      jsonLd = [...jsonLd, article]\n    }\n    return JSON.stringify(jsonLd)\n  }\n\n  let jsonLd = createJsonLd()\n\n  return (\n    <>\n      <html lang=\"ja\" />\n      <title>{fullTitle}</title>\n      <link rel=\"canonical\" href={canonicalUrl} />\n      <script type=\"application/ld+json\">{jsonLd}</script>\n\n      <meta name=\"description\" content={metaDescription} />\n      {imagePath && (\n        <>\n          <meta property=\"og:image\" content={imageUrl} />\n          <meta property=\"og:url\" content={imageUrl} />\n          <meta property=\"twitter:image\" content={imageUrl} />\n        </>\n      )}\n      <meta property=\"og:title\" content={fullTitle} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta\n        property=\"og:type\"\n        content={`${isRootPath ? \"website\" : \"webpage\"}`}\n      />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={siteMetadata.social.twitter} />\n      <meta name=\"twitter:title\" content={fullTitle} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import styled from \"styled-components\"\n\nexport const ContentsListHeader = styled.header`\n  text-align: center;\n\n  h1,\n  h2 {\n    &:after {\n      margin: 0 auto;\n      content: \"\";\n      display: block;\n      width: 98%;\n      height: 3px;\n      background: var(--orange);\n    }\n  }\n`\n\nexport const ContentsOrderedListWrapper = styled.ol`\n  column-count: 1;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  flex-wrap: wrap;\n  width: 100%;\n\n  li {\n    padding: 5px;\n    margin: var(--spacing-1);\n    box-sizing: border-box;\n    border: 1px solid var(--black);\n    border-radius: 5px;\n    background-color: #fff;\n\n    a {\n      color: var(--black);\n      text-decoration: none;\n    }\n\n    h2 {\n      font-size: var(--fontSize-2);\n    }\n  }\n  .thumbnail {\n    float: left;\n  }\n\n  @media screen and (min-width: calc(512px + 160px)) {\n    column-count: 2;\n\n    li {\n      padding: 15px;\n      width: 48%;\n\n      h2 {\n        font-size: var(--fontSize-3);\n      }\n\n      a {\n        &:hover h2 {\n          text-decoration: underline;\n        }\n      }\n    }\n  }\n  @media screen and (min-width: calc(768px + 330px)) {\n    column-count: 3;\n\n    li {\n      width: 32%;\n    }\n  }\n`\n\nexport const NormalAreaWrapper = styled.div`\n  background-color: #fff;\n`\n","import * as React from \"react\"\n\nimport { graphql, Link } from \"gatsby\"\nimport { PageContext } from \"gatsby/internal\"\nimport { convertCategory, mergePosts } from \"../utilFunction\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport { ContentsListHeader, ContentsOrderedListWrapper } from \"../style\"\nimport Pagination from \"../components/pagination\"\n\nconst PageList = ({\n  pageContext,\n  data,\n  location,\n}: {\n  pageContext: PageContext\n  data: any\n  location: Location\n}) => {\n  const posts = mergePosts(data.allMarkdownRemark, data.allWpPost, data.allFile)\n  const title = `記事一覧`\n\n  return (\n    <Layout location={location}>\n      <ContentsListHeader>\n        <h1>{title}</h1>\n      </ContentsListHeader>\n      <ContentsOrderedListWrapper>\n        {posts.map(post => {\n          return (\n            <li key={post.slug}>\n              <article\n                className=\"post-list-item\"\n                itemType=\"http://schema.org/Article\"\n              >\n                <Link to={`/${convertCategory(post.category)}/${post.slug}`}>\n                  <h2>\n                    <span>{post.title}</span>\n                  </h2>\n                  <section>\n                    <div>\n                      <small>\n                        <time>{post.date}</time>\n                      </small>\n                    </div>\n                    <div className=\"thumbnail\">\n                      {typeof post.gatsbyImage === \"undefined\" || (\n                        <GatsbyImage\n                          alt={post.altText}\n                          image={post.gatsbyImage}\n                          className=\"thumbnail\"\n                        />\n                      )}\n                    </div>\n                    <p dangerouslySetInnerHTML={{ __html: post.excerpt }} />\n                  </section>\n                </Link>\n              </article>\n            </li>\n          )\n        })}\n      </ContentsOrderedListWrapper>\n      <Pagination maxPage={pageContext.maxPage} current={pageContext.current} />\n    </Layout>\n  )\n}\n\nexport default PageList\n\nexport const Head = ({ location }: { location: Location }) => {\n  return <Seo title={`記事一覧`} location={location} />\n}\n\nexport const pageQuery = graphql`\n  query ($limit: Int!, $skip: Int!) {\n    allMarkdownRemark(\n      limit: $limit\n      skip: $skip\n      sort: { frontmatter: { date: DESC } }\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n          date(formatString: \"YYYY/MM/DD\")\n          description\n          featuredImagePath\n          category\n        }\n      }\n    }\n    allWpPost(limit: $limit, skip: $skip, sort: { date: DESC }) {\n      nodes {\n        title\n        excerpt\n        slug\n        date(formatString: \"YYYY/MM/DD\")\n        featuredImage {\n          node {\n            altText\n            gatsbyImage(\n              width: 100\n              height: 100\n              formats: [AUTO, WEBP, AVIF]\n              placeholder: BLURRED\n            )\n          }\n        }\n        categories {\n          nodes {\n            name\n          }\n        }\n      }\n    }\n    allFile(filter: { sourceInstanceName: { eq: \"images\" } }) {\n      edges {\n        node {\n          relativePath\n          childImageSharp {\n            gatsbyImageData(\n              width: 100\n              height: 100\n              formats: [AUTO, WEBP, AVIF]\n              placeholder: BLURRED\n            )\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["_ref","first","prev","next","last","maxPage","current","type","React","className","key","Link","to","PaginationWrapper","styled","nav","title","description","location","imagePath","post","children","siteMetadata","config","isRootPath","pathname","metaDescription","fullTitle","canonicalUrl","siteUrl","replace","imageUrl","jsonLd","author","name","summary","url","sameAs","social","twitter","github","publisher","logo","width","height","inLanguage","image","article","headline","excerpt","datePublished","Date","date","dateModified","mainEntityOfPage","concat","_toConsumableArray","JSON","stringify","createJsonLd","lang","rel","href","content","property","ContentsListHeader","header","ContentsOrderedListWrapper","ol","div","pageContext","data","posts","mergePosts","allMarkdownRemark","allWpPost","allFile","Layout","map","slug","itemType","convertCategory","category","gatsbyImage","GatsbyImage","alt","altText","dangerouslySetInnerHTML","__html","Pagination","Head","_ref2","Seo"],"sourceRoot":""}