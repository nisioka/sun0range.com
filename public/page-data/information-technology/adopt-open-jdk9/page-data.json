{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/information-technology/adopt-open-jdk9","result":{"data":{"allFile":{"edges":[]},"markdownRemark":null,"mdPrevious":null,"mdNext":null,"wpPost":{"id":"cG9zdDo1NTE=","title":"Oracle Java8からAdoptOpenJDK9への変更方法","content":"<p>Qiitaに記事を書きました：<br />\n<a href=\"https://qiita.com/nisioka/items/91b4a915d16bf514ad40\" target=\"_blank\" rel=\"noopener\">https://qiita.com/nisioka/items/91b4a915d16bf514ad40</a></p>\n<p>内容はほぼ同一ですが、本記事ではJavaの切り替えのバッチ起動も紹介しています。</p>\n<h2>はじめに</h2>\n<p>Oracleのリリースサイクル変更、ライセンスサポート形態の変更で、昨今のJava界隈は対応に追われていることかと思います。<br />\n有償サポートは費用面で難しく、リリースサイクルが半年という短さも難しいという案件は多く、選択肢として有力候補の一つなのがAdoptOpenJDKかと思われます。<br />\n探り探り導入してみたので、ここにまとめます。</p>\n<p><strong>補足。最初はAdoptOpenJDK11まで変更する記事のつもりでした。アプリケーションのバージョンアップをやりながら本記事を書いておりましたが、途中で根幹ライブラリがJava9以降対応していないことが分かり詰みました。別の機会に試して記事を完成させますが、それまではAdoptOpenJDKJava9までしか記載できないままです。</strong></p>\n<h2><span id=\"事前情報\" class=\"fragment\"></span>事前情報</h2>\n<p>from Java：Oracle Java 8<br />\nto java：AdoptOpenJDK9<br />\nOS:Windows 64bit、Linux（CentOS）64bit</p>\n<h2><span id=\"ダウンロード\" class=\"fragment\"></span>ダウンロード</h2>\n<p>AdoptOpenJDKからダウンロードします。<br />\n最新リリース（Latest release）のページだと、単一プラットフォーム向けにしかビルドされていない場合もあるので、以下アーカイブのページから個別に選択するほうがいいと思います。<br />\n<a class=\"autolink\" href=\"https://adoptopenjdk.net/archive.html\" target=\"_blank\" rel=\"nofollow noopener\">https://adoptopenjdk.net/archive.html</a><br />\n<a href=\"https://camo.qiitausercontent.com/ca7c8f0cf6c35fcd540b86de84c0385b50f5e118/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130353839342f36353032363539662d613731372d373366362d353436332d3032383130383239653230612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img decoding=\"async\" src=\"https://camo.qiitausercontent.com/ca7c8f0cf6c35fcd540b86de84c0385b50f5e118/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130353839342f36353032363539662d613731372d373366362d353436332d3032383130383239653230612e706e67\" alt=\"2018-11-09_18h52_55.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/105894/6502659f-a717-73f6-5463-02810829e20a.png\" /></a></p>\n<ol>\n<li>Choose a Version（バージョン選択）<br />\n今回はJava8→9まで上げるので、8と9のそれぞれを取得します（同一バージョンですが、Oracle Java 8 → AdoptOpenJDK9も確認します）。</li>\n<li>Choose a JVM（Java仮想マシン選択）<br />\n使用するJVM実装を選択します。所謂Oracle Javaを使用していたらHotspotを、IBM Javaを使用していたらOpenJ9を使用するという判断基準になるのかなと思います。これらの信憑性のある情報はあまり見つけられず、感覚的な話ではありますが、JVMの変更は怖いという印象です。<br />\n一応個人ブログではありますが、ベンチマークを測っておられる方がいましたので、紹介に留めて置きます。こちらを見ますと、CPUスピードの面ではHotspotが有利で、省メモリの面ではOpenJ9が有利でした。<br />\n<a class=\"autolink\" href=\"https://royvanrijn.com/blog/2018/05/openj9-jvm-shootout/\" target=\"_blank\" rel=\"nofollow noopener\">https://royvanrijn.com/blog/2018/05/openj9-jvm-shootout/</a><br />\n<a class=\"autolink\" href=\"https://royvanrijn.com/blog/2018/05/openj9-hotsport-specjvm2008/\" target=\"_blank\" rel=\"nofollow noopener\">https://royvanrijn.com/blog/2018/05/openj9-hotsport-specjvm2008/</a>ただし、リンク先でも書かれている通り、ちゃんと判断するならばこの結果を鵜呑みにせず、実際に対象の環境で自分で計測すべきです。</li>\n</ol>\n<h2><span id=\"インストール\" class=\"fragment\"></span>インストール</h2>\n<h3><span id=\"インストール方法\" class=\"fragment\"></span>インストール方法</h3>\n<p>Oracle javaのようにインストーラが付いてきたりはしません。<br />\n公式でインストール方法が以下に簡単に説明されていますが、少し微妙（JAVA_HOMEを使ってない）ので、少々変更して説明します。<br />\n<a class=\"autolink\" href=\"https://adoptopenjdk.net/installation.html?variant=openjdk8&amp;jvmVariant=hotspot\" target=\"_blank\" rel=\"nofollow noopener\">https://adoptopenjdk.net/installation.html?variant=openjdk8&amp;jvmVariant=hotspot</a></p>\n<ol>\n<li>ダウンロード<br />\n前述のとおり。</li>\n<li>（任意）チェックサム確認<br />\n結構ファイルサイズが大きいため、破損が心配であればチェックサムの値確認を行います。</li>\n<li>アーカイブ展開<br />\nまず、.zipなり、.tar.gzなりを使用する環境に合わせて解凍します。<br />\nそれらを任意の場所に配置しましょう。<br />\nex)<br />\nWindows：「C:/Program Files/Java/jdk8u192-b12」<br />\nLinux：「/user/java/jdk8u192-b12」</li>\n<li>PATHを通す<br />\nPATHはあまり弄りたくないので、JAVA_HOMEという環境変数を介するようにしましょう（通例だと思います）。<br />\nPATHにはJAVA_HOMEだけ登録し、javaのバージョン変更する際にはJAVA_HOMEだけ書き換えれば影響を極小にできます。そして、環境変数もあまり弄りたくないので、JAVA_HOMEが指す先もシンボリックリンクのディレクトリとします（latestとかdefaltなどが多いよう）。<br />\nPATH=%JAVA_HOME%\\bin;(以降略)<br />\nJAVA_HOME=&#8221;C:\\Program Files\\Java\\latest&#8221;<br />\n<a href=\"https://camo.qiitausercontent.com/109f6b3f5cad120e727f21d3f67909d757312e32/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130353839342f62643639333539312d636333302d653464392d636464342d3636306536303664336261392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img decoding=\"async\" src=\"https://camo.qiitausercontent.com/109f6b3f5cad120e727f21d3f67909d757312e32/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130353839342f62643639333539312d636333302d653464392d636464342d3636306536303664336261392e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/105894/bd693591-cc30-e4d9-cdd4-660e606d3ba9.png\" /></a><br />\n以降のインストール時もここの手順はシンボリックリンクの向き先だけを変更する手順となります。もし何か上手く動かない場合もこの向き先を元に戻せばOKです。</li>\n<li>バージョン確認<br />\njava -versionを打ちましょう。<br />\n該当バージョンで、AdoptOpenJdkという文言が出るはずです。<br />\n<a href=\"https://camo.qiitausercontent.com/2d53240fe3b2f900503e1386d370eee8d05086cf/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130353839342f62616231366461622d636465632d393334642d323162322d3139393330653066653737312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img decoding=\"async\" src=\"https://camo.qiitausercontent.com/2d53240fe3b2f900503e1386d370eee8d05086cf/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130353839342f62616231366461622d636465632d393334642d323162322d3139393330653066653737312e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/105894/bab16dab-cdec-934d-21b2-19930e0fe771.png\" /></a></li>\n<li>（おまけ）Javaのバージョン切り替えバッチ<br />\nここまで出来たら、環境のJavaを簡単に切り替えられるようにしておくと便利です。今後のバージョンアップ時も解凍まで済ませれば、このバッチを叩けばよいだけです。また、何かあったときに、すぐに古いバージョンに戻すということもやりやすいです。<br />\n設定方法はこちら：<br />\n<a href=\"/information-technology/switching-java-version\" target=\"_blank\" rel=\"noopener\">/information-technology/switching-java-version</a></li>\n</ol>\n<h3><span id=\"java8\" class=\"fragment\"></span>Java8</h3>\n<p>まずはJava8から。前提として元々のJavaは8なので、問題なく動く（はず）。</p>\n<ul>\n<li>(補足)UNIX系限定：securerandom.sourceについて<br />\nUNIX環境限定ですが、securerandom.sourceの設定値変更を忘れがちなのでここに注記します。<br />\n乱数生成の初期設定が、 &#8220;/dev/random&#8221; となっているのですが、そこまで厳密性が不要で、乱数の枯渇による遅延のほうが問題で、設定を &#8220;/dev/urandom&#8221; に変更している環境も多いと思います。<br />\nそういった環境では既存の設定と同じようにAdopt Open JDKをインストール後にも設定変更を忘れずに行う必要ありです。忘れずに、<strong>各バージョン</strong>に設定変更が必要です。<br />\n設定変更方法などは、こちらなど：<a class=\"autolink\" href=\"http://otndnld.oracle.co.jp/document/products/E13153_01/wlcp/wlss40/configwlss/jvmrand.html\" target=\"_blank\" rel=\"nofollow noopener\">http://otndnld.oracle.co.jp/document/products/E13153_01/wlcp/wlss40/configwlss/jvmrand.html</a></li>\n</ul>\n<h3><span id=\"java9\" class=\"fragment\"></span>Java9</h3>\n<p>モジュール機能「Project Jigsaw」による構成変更によって、数々の問題が発生する鬼門。<br />\nいくらか躓いたことを参考までに。<br />\nOracleが出している<a href=\"https://docs.oracle.com/javase/jp/9/migrate/toc.htm#JSMIG-GUID-7744EF96-5899-4FB2-B34E-86D49B2E89B6\" target=\"_blank\" rel=\"nofollow noopener\">Java9移行ガイド</a>は必読。</p>\n<ul>\n<li>Gradleが動かない<br />\n古いGradleだと&#8221;Could not determine java version from&#8221;というエラーが発生する。<br />\n<a id=\"reference-8ba5eed6c314e3f702b2\" class=\"autolink\" href=\"https://qiita.com/Kaoru_Yamamoto/items/dcb3815795d6e752cff3\">https://qiita.com/Kaoru_Yamamoto/items/dcb3815795d6e752cff3</a></li>\n</ul>\n<ul>\n<li>Illegal Access To Internal APIs警告が発生<br />\nJavaの内部APIのうち、外部からの使用を想定されていないものもJava8まで使用できていましたが、それらが制限されるようになりました。<br />\n制限というのは、使用できなくなっていたり、WARN警告が発生します。</p>\n<ul>\n<li>【対策①】<br />\n（根本対応）代替APIにソースを書き換える。</li>\n<li>【対策②】<br />\n（暫定対応）Java起動オプション&#8221;&#8211;add-exports (該当API)&#8221;を追加する。</li>\n<li>【対策③】<br />\n（暫定対応）Java起動オプション&#8221;&#8211;add-opens (該当API)&#8221;を追加する。APIをリフレクションで操作している場合にはこちらのオプションです。</li>\n</ul>\n</li>\n</ul>\n<p style=\"padding-left: 30px;\">暫定対応となっているものは、経過措置としての手段ですので、今後のバージョンでは使用できない可能性があるので、なるべく早く根本対応する必要があります。<br />\n<a class=\"autolink\" href=\"https://blog.codefx.org/java/java-9-migration-guide/#Illegal-Access-To-Internal-APIs\" target=\"_blank\" rel=\"nofollow noopener\">https://blog.codefx.org/java/java-9-migration-guide/#Illegal-Access-To-Internal-APIs</a></p>\n<h2>参考</h2>\n<p>https://qiita.com/nisioka/items/91b4a915d16bf514ad40</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"UpeMjH1Oyv\"><p><a href=\"/information-technology/adopt-open-jdk9/\">Oracle Java8からAdoptOpenJDK9への変更方法</a></p></blockquote>\n<p><iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" title=\"&#8220;Oracle Java8からAdoptOpenJDK9への変更方法&#8221; &#8212; 分かりやすい技術ブログ\" src=\"/information-technology/adopt-open-jdk9/embed/#?secret=IjCyrDSrtc#?secret=UpeMjH1Oyv\" data-secret=\"UpeMjH1Oyv\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></p>\n","excerpt":"<p>Qiitaに記事を書きました： https://qiita.com/nisioka/items/91b4a915d16bf514ad40 内容はほぼ同一ですが、本記事ではJavaの切り替えのバッチ起動も紹介しています。  [&hellip;]</p>\n","slug":"adopt-open-jdk9","date":"2018/11/27","modified":"2019/01/16","featuredImage":{"node":{"altText":"","gatsbyImage":{"images":{"sources":[{"srcSet":"/_gatsby/image/909e9c1e6f47391156e4c8a396d600f7/6ce39399623c0b45ee120b713ee228aa/953px-OpenJDK_logo.svg.avif?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2018%2F11%2F953px-OpenJDK_logo.svg.png&a=w%3D23%26h%3D7%26fm%3Davif%26q%3D75&cd=57c8b3246bc4062f9c12121cef4795e3 23w,/_gatsby/image/909e9c1e6f47391156e4c8a396d600f7/54d6c4bdf761049da9db05f10f00d22a/953px-OpenJDK_logo.svg.avif?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2018%2F11%2F953px-OpenJDK_logo.svg.png&a=w%3D46%26h%3D13%26fm%3Davif%26q%3D75&cd=57c8b3246bc4062f9c12121cef4795e3 46w,/_gatsby/image/909e9c1e6f47391156e4c8a396d600f7/ca888e116e6477bd538bb0d8f9951c0b/953px-OpenJDK_logo.svg.avif?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2018%2F11%2F953px-OpenJDK_logo.svg.png&a=w%3D91%26h%3D26%26fm%3Davif%26q%3D75&cd=57c8b3246bc4062f9c12121cef4795e3 91w,/_gatsby/image/909e9c1e6f47391156e4c8a396d600f7/2e0294455b177692062428660fee93bb/953px-OpenJDK_logo.svg.avif?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2018%2F11%2F953px-OpenJDK_logo.svg.png&a=w%3D182%26h%3D52%26fm%3Davif%26q%3D75&cd=57c8b3246bc4062f9c12121cef4795e3 182w","type":"image/avif","sizes":"(min-width: 91px) 91px, 100vw"},{"srcSet":"/_gatsby/image/909e9c1e6f47391156e4c8a396d600f7/c07d6496539b98dcfcc28716814c712a/953px-OpenJDK_logo.svg.webp?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2018%2F11%2F953px-OpenJDK_logo.svg.png&a=w%3D23%26h%3D7%26fm%3Dwebp%26q%3D75&cd=57c8b3246bc4062f9c12121cef4795e3 23w,/_gatsby/image/909e9c1e6f47391156e4c8a396d600f7/71ec9119d8a69054a1de5aef95971a44/953px-OpenJDK_logo.svg.webp?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2018%2F11%2F953px-OpenJDK_logo.svg.png&a=w%3D46%26h%3D13%26fm%3Dwebp%26q%3D75&cd=57c8b3246bc4062f9c12121cef4795e3 46w,/_gatsby/image/909e9c1e6f47391156e4c8a396d600f7/aea7eb0f3fa8098d0e5b2f2dbf9b15b2/953px-OpenJDK_logo.svg.webp?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2018%2F11%2F953px-OpenJDK_logo.svg.png&a=w%3D91%26h%3D26%26fm%3Dwebp%26q%3D75&cd=57c8b3246bc4062f9c12121cef4795e3 91w,/_gatsby/image/909e9c1e6f47391156e4c8a396d600f7/1581f51ee7a50c6a454641982cb1a317/953px-OpenJDK_logo.svg.webp?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2018%2F11%2F953px-OpenJDK_logo.svg.png&a=w%3D182%26h%3D52%26fm%3Dwebp%26q%3D75&cd=57c8b3246bc4062f9c12121cef4795e3 182w","type":"image/webp","sizes":"(min-width: 91px) 91px, 100vw"}],"fallback":{"src":"/_gatsby/image/909e9c1e6f47391156e4c8a396d600f7/59e8d345437f2c9612d979b56a3fad82/953px-OpenJDK_logo.svg.png?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2018%2F11%2F953px-OpenJDK_logo.svg.png&a=w%3D23%26h%3D7%26fm%3Dpng%26q%3D75&cd=57c8b3246bc4062f9c12121cef4795e3","srcSet":"/_gatsby/image/909e9c1e6f47391156e4c8a396d600f7/59e8d345437f2c9612d979b56a3fad82/953px-OpenJDK_logo.svg.png?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2018%2F11%2F953px-OpenJDK_logo.svg.png&a=w%3D23%26h%3D7%26fm%3Dpng%26q%3D75&cd=57c8b3246bc4062f9c12121cef4795e3 23w,/_gatsby/image/909e9c1e6f47391156e4c8a396d600f7/1bd0b40b5c2a843fe1ec1cef21937148/953px-OpenJDK_logo.svg.png?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2018%2F11%2F953px-OpenJDK_logo.svg.png&a=w%3D46%26h%3D13%26fm%3Dpng%26q%3D75&cd=57c8b3246bc4062f9c12121cef4795e3 46w,/_gatsby/image/909e9c1e6f47391156e4c8a396d600f7/0853092f765057ce30bb1b58846ac32c/953px-OpenJDK_logo.svg.png?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2018%2F11%2F953px-OpenJDK_logo.svg.png&a=w%3D91%26h%3D26%26fm%3Dpng%26q%3D75&cd=57c8b3246bc4062f9c12121cef4795e3 91w,/_gatsby/image/909e9c1e6f47391156e4c8a396d600f7/1cc2762386b8625e3088bc57645515cf/953px-OpenJDK_logo.svg.png?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2018%2F11%2F953px-OpenJDK_logo.svg.png&a=w%3D182%26h%3D52%26fm%3Dpng%26q%3D75&cd=57c8b3246bc4062f9c12121cef4795e3 182w","sizes":"(min-width: 91px) 91px, 100vw"}},"layout":"constrained","width":91,"height":26,"backgroundColor":"rgb(248,248,248)"}}},"categories":{"nodes":[{"name":"技術"}]},"tags":{"nodes":[{"name":"Adopt Open JDK"},{"name":"Java"},{"name":"java9"},{"name":"Open JDK"}]}},"wpPrevious":{"title":"読書のすゝめ。エンジニアとしての方向性を変える本に出会おう！","slug":"recommend-reading","categories":{"nodes":[{"name":"書評"}]}},"wpNext":{"title":"【書評】テスト駆動開発","slug":"test-driven-development","categories":{"nodes":[{"name":"書評"}]}}},"pageContext":{"id":"cG9zdDo1NTE=","previousPostId":"cG9zdDo2MTU=","nextPostId":"cG9zdDo1NjI=","imagePath":null}},"staticQueryHashes":["2488138200","3280520893"],"slicesMap":{}}