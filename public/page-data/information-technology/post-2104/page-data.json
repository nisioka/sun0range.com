{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/information-technology/post-2104","result":{"data":{"allFile":{"edges":[]},"markdownRemark":null,"mdPrevious":null,"mdNext":null,"wpPost":{"id":"cG9zdDoyMTA0","title":"Docker概要まとめ【初心者向け】","content":"\n<p>Dockerとは何か？を簡単にまとめました。これから始めてDockerを触る人向けにイメージをお伝えできればといったレベル感で書いています。<br><br>ちなみに、以下のチュートリアルは分かりやすくまとまっているので、Dockerを少し触ってみたい、触りながら学習したいという場合にはお勧めです。</p>\n\n\n\n<p><a href=\"https://tech.plaid.co.jp/tutorial-for-docker-beginners/\">https://tech.plaid.co.jp/tutorial-for-docker-beginners/</a></p>\n\n\n\n<h2 class=\"wp-block-heading\">Dockerとは</h2>\n\n\n\n<p>Dockerとはコンテナの仮想実行環境です。コンテナとは、&#8221;一部の切り出された環境の容器&#8221;です。例えば、その容器の中にとあるDBをインストールしたり、プログラミング言語の開発環境を構築したりといったことができます。<br>Dockerの利点としては、こうしたコンテナを高速に呼び出せたり管理できるところにあります。</p>\n\n\n\n<p>ちなみに、これらはLinuxのLXCという機能を用いて実現されているため、Linuxが使える状態を作らなければなりません。これはMacやもちろんLinuxでは比較的簡単なのですが、Windowsマシンではそれらを用意してDockerを動かすようにせねばならず、比較的Docker環境の準備は大変です（ハマることが多いです）。</p>\n\n\n\n<h2 class=\"wp-block-heading\">用語説明</h2>\n\n\n\n<h3 class=\"wp-block-heading\">Image/Container</h3>\n\n\n\n<p>まず、最初に知っておくべきは、Docker  Container（コンテナ）と Docker  Image（イメージ）です。Containerとは、実際にDockerで動かす環境の容器です。Imageはその元となる雛形を表します。<br>Javaコードで表すのであれば、Imageがクラスであり、Containerがインスタンスです。なので、同一ImageからContainerを何個も作成することが可能です。</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Image/Containerの関係性の概念\nImage container1 = new Image();\nImage container2 = new Image();</code></pre>\n\n\n\n<h3 class=\"wp-block-heading\">オーケストレーション</h3>\n\n\n\n<p>まず前提として、Containerを作成する時、基本的には一つの塊でまとめたいです。</p>\n\n\n\n<p>例えばプログラミング言語とDBの環境を作ろうとしたときに、一つのコンテナに両者をインストールするか、二つのコンテナにそれぞれインストールするという手段が考えられます。<br>そうした時に、後者を選ぶことが多いです。なぜなら再利用がしやすくなるからです。DBだけ別の用途でも使いまわしたいと思った時にDBのImageを再利用すれば楽だからです。</p>\n\n\n\n<p>前置きが長くなりましたが、こうして分割した複数のContainerを扱う時に、それぞれが独立してしまっているので、Container同士の通信などといった結合の管理が大変です。なのでそれらの複数のContainerを管理しているツールを総称してオーケストレーションツールと言います。</p>\n\n\n\n<h4 class=\"wp-block-heading\">Docker Compose </h4>\n\n\n\n<p>Dockerに内蔵の簡易オーケストレーション機能です。上記オーケストレーションの機能を持っており、数個のContainerを扱うくらいならば十分に単独で使用できます。Dockerのラップなので内部でDockerコマンドを使用しています。</p>\n\n\n\n<p>そしてこれは、コンテナの起動情報をdocker-compose.ymlとしてコード管理でき、またコマンド体系もまとまっているので、単一Containerの場合も使用することが多いです。</p>\n\n\n\n<h4 class=\"wp-block-heading\">Kubernates</h4>\n\n\n\n<p>読み方は諸説あるようですが、カタカナで書くと&#8221;クバネティス&#8221;などと読むようです。書く際はk8sと略されます。<br>こちらは、簡易ではなくちゃんとしたオーケストレーションツールで、複数台のホストから構成される実行環境を、１台の実行環境のように扱うことができます。プロダクト開発においては基本的にこちらを使ってDocker Containerの管理をすることになります。本記事ではスコープ外としてこれ以上の説明はしません。ちなみに、上記Docker-composeとも併用して使えます。</p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"volume\">Volume</h3>\n\n\n\n<p>Containerは独立した環境なので、データも独立しています。それだとContainer外から情報を渡したり、Containerで作られたデータを残したりが難しいので、Volumeという仕組みでContainer内外のデータをマウントすることができます。</p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"port\">Port</h3>\n\n\n\n<p>Volumeと同様に、ネットワークも独立しています。なので、Container内部のネットワークのPortとホスト側のPortをマッピングさせる仕組みが必要で、それがPortの機能で行われます。これを使えばContainerでPortに対する待ち受けを外部のホスト側からリクエストしたりできます。</p>\n\n\n\n<h3 class=\"wp-block-heading\">Docker Hub</h3>\n\n\n\n<p>Docker Imageの共有管理サイトです。OSSの公式などが公開されていたり個人で作成したImageも公開されていたりします(なので自分でアップロードすることもできます)。基本はこちらからDocker Imageがダウンロードされます。</p>\n\n\n\n<h3 class=\"wp-block-heading\" id=\"dockerfile\">Dockerfile （ファイル）</h3>\n\n\n\n<p>Docker Imageを作るための設計書です。このファイルを共有すれば、どのマシンでも同じ環境を構築できるようになるわけです。</p>\n\n\n\n<script src=\"https://gist-it.appspot.com/github/nisioka/plaid-study-20180605/blob/master/step2/Dockerfile\"></script>\n\n\n\n<h3 class=\"wp-block-heading\">docker-compose（ファイル）</h3>\n\n\n\n<p>Docker Composeを動かすための設計書です。</p>\n\n\n\n<script src=\"https://gist-it.appspot.com/github/nisioka/plaid-study-20180605/blob/master/step2/docker-compose.yml\"></script>\n\n\n\n<h2 class=\"wp-block-heading\">よく使うコマンド</h2>\n\n\n\n<h3 class=\"wp-block-heading\">Imageを作る</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>docker-compose build</code></pre>\n\n\n\n<p>このコマンドで、（同一ディレクトリにある）Dockerfileに記載されている通りにDocker Imageを生成します。一度生成されたものは保持されるのでDockerfileに変更がない限りbuildしなおす必要はありません。</p>\n\n\n\n<h3 class=\"wp-block-heading\">Containerを立ち上げる</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>docker-compose up -d</code></pre>\n\n\n\n<p> (同一ディレクトリにある)docker-compose.ymlに従いContainerが立ち上がります。ImageはDockerfileでbuildされたものから、VolumeやPortはdocker-compose.ymlに記載の通りにです。</p>\n\n\n\n<h3 class=\"wp-block-heading\">Container環境の中に入る</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>docker-compose exec (Container名) bash</code></pre>\n\n\n\n<p>構築したContainer環境の中に入って様々な操作ができます。(Container名)に指定するのはdocker-compose.ymlでservicesに指定したもので、上の例ですと「container2」を指定します。</p>\n\n\n\n<p>中に入ったらLinuxの操作となります。こうして軽量に任意の環境を使いたくてDockerを使うことはよくあります。exitコマンドで抜けられます。</p>\n\n\n\n<h3 class=\"wp-block-heading\">Containerとホスト間のファイルコピー</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>docker cp (Container ID):(Container内の任意のパス) .</code></pre>\n\n\n\n<p>上記はdocker Container内からホスト側のカレントディレクトリへのファイルコピーを表します(&#8220;.&#8221;が最後にあり、これがカレントディレクトリを表します。任意のパスへコピーしたければ&#8221;.&#8221;を書き換えます)。またホスト側からContainerへのコピーも可能で、cpの後の引数の順序を入れ換えれば良いです。</p>\n\n\n\n<p>Container IDは以下で調べられます。</p>\n\n\n\n<h3 class=\"wp-block-heading\">Containerのプロセスを調べる</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>docker ps</code></pre>\n\n\n\n<p>上記コマンドを打つと以下のような情報が出力されます。ここからContainer ID等を知ることができます。</p>\n\n\n\n<pre class=\"wp-block-code\"><code>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS   NAMES\nabcdefghijkl        ubuntu              \"/entrypoint.sh\"    2 days ago          Up 3 minutes                container2</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">最後に</h2>\n\n\n\n<p>基本的と思われるところは以上です。これだけ解れば最低限動かせると思います。ただ、実際に何度も使って慣れることが大事なのでチュートリアルでもいいですし、どんどん触りましょう。</p>\n\n\n\n<p><a href=\"https://tech.plaid.co.jp/tutorial-for-docker-beginners/\">https://tech.plaid.co.jp/tutorial-for-docker-beginners/</a></p>\n","excerpt":"<p>Dockerとは何か？を簡単にまとめました。これから始めてDockerを触る人向けにイメージをお伝えできればといったレベル感で書いています。 ちなみに、以下のチュートリアルは分かりやすくまとまっているので、Dockerを [&hellip;]</p>\n","slug":"post-2104","date":"2019/07/07","modified":"2019/07/10","featuredImage":{"node":{"altText":"","gatsbyImage":{"images":{"sources":[{"srcSet":"/_gatsby/image/a0d0aa8cdef0c02da82bb9e151cda1af/472f2c518c86ab596b31d51cd6713462/24174642365_68f0c433e2.avif?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2019%2F07%2F24174642365_68f0c433e2.jpg&a=w%3D75%26h%3D75%26fm%3Davif%26q%3D75&cd=77a6f7c32c41f37b8294a0ca7eb16d0c 75w,/_gatsby/image/a0d0aa8cdef0c02da82bb9e151cda1af/98b876a19b304f688adec21c1248996e/24174642365_68f0c433e2.avif?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2019%2F07%2F24174642365_68f0c433e2.jpg&a=w%3D150%26h%3D150%26fm%3Davif%26q%3D75&cd=77a6f7c32c41f37b8294a0ca7eb16d0c 150w,/_gatsby/image/a0d0aa8cdef0c02da82bb9e151cda1af/9146f2e7956e3d2443109c45823049b4/24174642365_68f0c433e2.avif?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2019%2F07%2F24174642365_68f0c433e2.jpg&a=w%3D300%26h%3D300%26fm%3Davif%26q%3D75&cd=77a6f7c32c41f37b8294a0ca7eb16d0c 300w","type":"image/avif","sizes":"(min-width: 300px) 300px, 100vw"},{"srcSet":"/_gatsby/image/a0d0aa8cdef0c02da82bb9e151cda1af/0c3fbf03e3c6204c3af0d6baaa18db99/24174642365_68f0c433e2.webp?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2019%2F07%2F24174642365_68f0c433e2.jpg&a=w%3D75%26h%3D75%26fm%3Dwebp%26q%3D75&cd=77a6f7c32c41f37b8294a0ca7eb16d0c 75w,/_gatsby/image/a0d0aa8cdef0c02da82bb9e151cda1af/3461ec5d7257ac8c61909dddf089364f/24174642365_68f0c433e2.webp?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2019%2F07%2F24174642365_68f0c433e2.jpg&a=w%3D150%26h%3D150%26fm%3Dwebp%26q%3D75&cd=77a6f7c32c41f37b8294a0ca7eb16d0c 150w,/_gatsby/image/a0d0aa8cdef0c02da82bb9e151cda1af/3dd39cb2eb5cbb58703d37f75f569738/24174642365_68f0c433e2.webp?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2019%2F07%2F24174642365_68f0c433e2.jpg&a=w%3D300%26h%3D300%26fm%3Dwebp%26q%3D75&cd=77a6f7c32c41f37b8294a0ca7eb16d0c 300w","type":"image/webp","sizes":"(min-width: 300px) 300px, 100vw"}],"fallback":{"src":"/_gatsby/image/a0d0aa8cdef0c02da82bb9e151cda1af/f1ed88f4f36e35d61f5e14cf088130ff/24174642365_68f0c433e2.jpg?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2019%2F07%2F24174642365_68f0c433e2.jpg&a=w%3D75%26h%3D75%26fm%3Djpg%26q%3D75&cd=77a6f7c32c41f37b8294a0ca7eb16d0c","srcSet":"/_gatsby/image/a0d0aa8cdef0c02da82bb9e151cda1af/f1ed88f4f36e35d61f5e14cf088130ff/24174642365_68f0c433e2.jpg?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2019%2F07%2F24174642365_68f0c433e2.jpg&a=w%3D75%26h%3D75%26fm%3Djpg%26q%3D75&cd=77a6f7c32c41f37b8294a0ca7eb16d0c 75w,/_gatsby/image/a0d0aa8cdef0c02da82bb9e151cda1af/849abd9ed7ce5536b8e3f640edac877b/24174642365_68f0c433e2.jpg?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2019%2F07%2F24174642365_68f0c433e2.jpg&a=w%3D150%26h%3D150%26fm%3Djpg%26q%3D75&cd=77a6f7c32c41f37b8294a0ca7eb16d0c 150w,/_gatsby/image/a0d0aa8cdef0c02da82bb9e151cda1af/b29d04c23fae293dd95bf1d035abdf85/24174642365_68f0c433e2.jpg?u=http%3A%2F%2Flocalhost%2Fwp-content%2Fuploads%2F2019%2F07%2F24174642365_68f0c433e2.jpg&a=w%3D300%26h%3D300%26fm%3Djpg%26q%3D75&cd=77a6f7c32c41f37b8294a0ca7eb16d0c 300w","sizes":"(min-width: 300px) 300px, 100vw"}},"layout":"constrained","width":300,"height":300,"backgroundColor":"rgb(248,248,232)"}}},"categories":{"nodes":[{"name":"技術"}]},"tags":{"nodes":[{"name":"Docker"}]}},"wpPrevious":{"title":"ファミペイの利用方法について","slug":"how-to-use-famipay","categories":{"nodes":[{"name":"生活"}]}},"wpNext":{"title":"RUNDECKで現在日付をパラメータに渡す方法","slug":"rundeck-today","categories":{"nodes":[{"name":"技術"}]}}},"pageContext":{"id":"cG9zdDoyMTA0","previousPostId":"cG9zdDoyMTIz","nextPostId":"cG9zdDoyMTM3","imagePath":null}},"staticQueryHashes":["2488138200","3280520893"],"slicesMap":{}}